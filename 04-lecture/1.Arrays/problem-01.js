"use strict";
class SingleArray {
    constructor() {
        this.arr = new Array(0);
    }
    get size() {
        return this.arr.length;
    }
    add(item, index = this.size) {
        let position = Math.min(index, this.size);
        let target = new Array(this.size + 1);
        let i = 0;
        while (i < position) {
            target[i] = this.arr[i++];
        }
        target[i++] = item;
        for (; i < this.size + 1; i++) {
            target[i] = this.arr[i - 1];
        }
        this.arr = target;
    }
    remove(index) {
        let position = Math.min(index, this.size);
        let target = new Array(this.size - 1);
        let item = this.arr[index];
        let i = 0;
        for (; i < position; i++) {
            target[i] = this.arr[i];
        }
        for (; i < this.size - 1; i++) {
            target[i] = this.arr[i + 1];
        }
        this.arr = target;
        return item;
    }
}
module.exports = function ([line]) {
    const SIZE = parseInt(line, 10);
    const arr = new SingleArray();
    for (let i = 0; i < SIZE; i++) {
        arr.add(i, i);
    }
    return null;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvYmxlbS0wMS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInByb2JsZW0tMDEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE1BQU0sV0FBVztJQUFqQjtRQUNVLFFBQUcsR0FBUSxJQUFJLEtBQUssQ0FBSSxDQUFDLENBQUMsQ0FBQztJQXVDckMsQ0FBQztJQXJDQyxJQUFXLElBQUk7UUFDYixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO0lBQ3pCLENBQUM7SUFFTSxHQUFHLENBQUMsSUFBTyxFQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSTtRQUNuQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsSUFBSSxNQUFNLEdBQUcsSUFBSSxLQUFLLENBQUksSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFVixPQUFPLENBQUMsR0FBRyxRQUFRLEVBQUU7WUFDbkIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUMzQjtRQUVELE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUVuQixPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM3QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7U0FDNUI7UUFDRCxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztJQUNwQixDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQWE7UUFDekIsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFDLElBQUksTUFBTSxHQUFHLElBQUksS0FBSyxDQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFVixPQUFPLENBQUMsR0FBRyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDeEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekI7UUFDRCxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUM3QixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDN0I7UUFDRCxJQUFJLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztRQUVsQixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBVztJQUN6QyxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sR0FBRyxHQUFHLElBQUksV0FBVyxFQUFVLENBQUM7SUFFdEMsS0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUM1QixHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztLQUNmO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmNsYXNzIFNpbmdsZUFycmF5PFQ+IHtcbiAgcHJpdmF0ZSBhcnI6IFRbXSA9IG5ldyBBcnJheTxUPigwKTtcblxuICBwdWJsaWMgZ2V0IHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuYXJyLmxlbmd0aDtcbiAgfVxuXG4gIHB1YmxpYyBhZGQoaXRlbTogVCwgaW5kZXggPSB0aGlzLnNpemUpOiB2b2lkIHtcbiAgICBsZXQgcG9zaXRpb24gPSBNYXRoLm1pbihpbmRleCwgdGhpcy5zaXplKTtcbiAgICBsZXQgdGFyZ2V0ID0gbmV3IEFycmF5PFQ+KHRoaXMuc2l6ZSArIDEpO1xuICAgIGxldCBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgcG9zaXRpb24pIHtcbiAgICAgIHRhcmdldFtpXSA9IHRoaXMuYXJyW2krK107XG4gICAgfVxuXG4gICAgdGFyZ2V0W2krK10gPSBpdGVtO1xuXG4gICAgZm9yICg7IGkgPCB0aGlzLnNpemUgKyAxOyBpKyspIHtcbiAgICAgIHRhcmdldFtpXSA9IHRoaXMuYXJyW2kgLSAxXVxuICAgIH1cbiAgICB0aGlzLmFyciA9IHRhcmdldDtcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmUoaW5kZXg6IG51bWJlcik6IFQge1xuICAgIGxldCBwb3NpdGlvbiA9IE1hdGgubWluKGluZGV4LCB0aGlzLnNpemUpO1xuICAgIGxldCB0YXJnZXQgPSBuZXcgQXJyYXk8VD4odGhpcy5zaXplIC0gMSk7XG4gICAgbGV0IGl0ZW0gPSB0aGlzLmFycltpbmRleF07XG4gICAgbGV0IGkgPSAwO1xuXG4gICAgZm9yICg7IGkgPCBwb3NpdGlvbjsgaSsrKSB7XG4gICAgICB0YXJnZXRbaV0gPSB0aGlzLmFycltpXTtcbiAgICB9XG4gICAgZm9yICg7IGkgPCB0aGlzLnNpemUgLSAxOyBpKyspIHtcbiAgICAgIHRhcmdldFtpXSA9IHRoaXMuYXJyW2kgKyAxXTtcbiAgICB9XG4gICAgdGhpcy5hcnIgPSB0YXJnZXQ7XG5cbiAgICByZXR1cm4gaXRlbTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChbbGluZV06IHN0cmluZ1tdKSB7XG4gIGNvbnN0IFNJWkUgPSBwYXJzZUludChsaW5lLCAxMCk7XG4gIGNvbnN0IGFyciA9IG5ldyBTaW5nbGVBcnJheTxudW1iZXI+KCk7XG5cbiAgZm9yKGxldCBpID0gMDsgaSA8IFNJWkU7IGkrKykge1xuICAgIGFyci5hZGQoaSwgaSk7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59O1xuIl19