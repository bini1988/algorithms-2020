"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatrixArray = void 0;
class MatrixArray {
    constructor() {
        this.size = 0;
        this.amount = 15;
        this.box = [[]];
    }
    get isEmpty() {
        return this.size === 0;
    }
    from(arr) {
        this.box = [];
        this.size = arr.length;
        for (let i = 0; i < Math.ceil(this.size / this.amount); i++) {
            this.box.push(arr.slice(this.amount * i, this.amount * i + this.amount));
        }
    }
    indexesOf(i) {
        return [~~(i / this.amount), i % this.amount];
    }
    add(item, index = this.size) {
        if (this.size === this.box.length * this.amount) {
            this.box.push(new Array(this.amount));
        }
        let i = index;
        let [j, k] = this.indexesOf(i);
        let tmp = this.box[j][k];
        this.box[j][k] = item;
        for (i++; i < this.size + 1; i++) {
            [j, k] = this.indexesOf(i);
            [tmp, this.box[j][k]] = [this.box[j][k], tmp];
        }
        this.size++;
    }
    remove(index) {
        let [j1, k1] = this.indexesOf(index);
        let item = this.box[j1][k1];
        for (let i = index; i < this.size - 1; i++) {
            let [j2, k2] = this.indexesOf(i + 1);
            this.box[j1][k1] = this.box[j2][k2];
            [j1, k1] = [j2, k2];
        }
        this.size--;
        return item;
    }
    toString() {
        let out = [];
        for (let i = 0; i < this.size; i++) {
            let [j, k] = this.indexesOf(i);
            out.push(this.box[j][k]);
        }
        return out.join(",");
    }
}
exports.MatrixArray = MatrixArray;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWF0cml4QXJyYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJNYXRyaXhBcnJheS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxNQUFhLFdBQVc7SUFNdEI7UUFDRSxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVNLElBQUksQ0FBQyxHQUFRO1FBQ2xCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO1FBRXZCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzNELElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDMUU7SUFDSCxDQUFDO0lBRU0sU0FBUyxDQUFDLENBQVM7UUFDeEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU0sR0FBRyxDQUFDLElBQU8sRUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUk7UUFDbkMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDL0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDdkM7UUFDRCxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDZCxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDL0IsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV6QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUV0QixLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNoQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzNCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDL0M7UUFDRCxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRU0sTUFBTSxDQUFDLEtBQWE7UUFDekIsSUFBSSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFDLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFFckMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1NBQ3JCO1FBQ0QsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ1osT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU0sUUFBUTtRQUNiLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUViLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUN6QjtRQUNELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0NBQ0Y7QUFyRUQsa0NBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUFycmF5IH0gZnJvbSBcIi4vSUFycmF5XCI7XG5cbmV4cG9ydCBjbGFzcyBNYXRyaXhBcnJheTxUPiB7XG4gIHByaXZhdGUgYm94OiBBcnJheTxBcnJheTxUPj47XG4gIC8qKiDQmtC+0LvQuNGH0LXRgdGC0LLQviDRjdC70LXQvNC10L3RgtC+0LIg0LIg0L7QtNC90L7QvCDQv9C+0LQg0LzQsNGB0YHQuNCy0LUgKi9cbiAgcHVibGljIGFtb3VudDogbnVtYmVyO1xuICBwdWJsaWMgc2l6ZTogbnVtYmVyO1xuXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNpemUgPSAwO1xuICAgIHRoaXMuYW1vdW50ID0gMTU7XG4gICAgdGhpcy5ib3ggPSBbW11dO1xuICB9XG5cbiAgcHVibGljIGdldCBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLnNpemUgPT09IDA7XG4gIH1cblxuICBwdWJsaWMgZnJvbShhcnI6IFRbXSkge1xuICAgIHRoaXMuYm94ID0gW107XG4gICAgdGhpcy5zaXplID0gYXJyLmxlbmd0aDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5jZWlsKHRoaXMuc2l6ZSAvIHRoaXMuYW1vdW50KTsgaSsrKSB7XG4gICAgICB0aGlzLmJveC5wdXNoKGFyci5zbGljZSh0aGlzLmFtb3VudCAqIGksIHRoaXMuYW1vdW50ICogaSArIHRoaXMuYW1vdW50KSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGluZGV4ZXNPZihpOiBudW1iZXIpIHtcbiAgICByZXR1cm4gW35+KGkgLyB0aGlzLmFtb3VudCksIGkgJSB0aGlzLmFtb3VudF07XG4gIH1cblxuICBwdWJsaWMgYWRkKGl0ZW06IFQsIGluZGV4ID0gdGhpcy5zaXplKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gdGhpcy5ib3gubGVuZ3RoICogdGhpcy5hbW91bnQpIHtcbiAgICAgIHRoaXMuYm94LnB1c2gobmV3IEFycmF5KHRoaXMuYW1vdW50KSk7XG4gICAgfVxuICAgIGxldCBpID0gaW5kZXg7XG4gICAgbGV0IFtqLCBrXSA9IHRoaXMuaW5kZXhlc09mKGkpO1xuICAgIGxldCB0bXAgPSB0aGlzLmJveFtqXVtrXTtcblxuICAgIHRoaXMuYm94W2pdW2tdID0gaXRlbTtcblxuICAgIGZvciAoaSsrOyBpIDwgdGhpcy5zaXplICsgMTsgaSsrKSB7XG4gICAgICBbaiwga10gPSB0aGlzLmluZGV4ZXNPZihpKTtcbiAgICAgIFt0bXAsIHRoaXMuYm94W2pdW2tdXSA9IFt0aGlzLmJveFtqXVtrXSwgdG1wXTtcbiAgICB9XG4gICAgdGhpcy5zaXplKys7XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlKGluZGV4OiBudW1iZXIpOiBUIHtcbiAgICBsZXQgW2oxLCBrMV0gPSB0aGlzLmluZGV4ZXNPZihpbmRleCk7XG4gICAgbGV0IGl0ZW0gPSB0aGlzLmJveFtqMV1bazFdO1xuXG4gICAgZm9yIChsZXQgaSA9IGluZGV4OyBpIDwgdGhpcy5zaXplIC0gMTsgaSsrKSB7XG4gICAgICBsZXQgW2oyLCBrMl0gPSB0aGlzLmluZGV4ZXNPZihpICsgMSk7XG5cbiAgICAgIHRoaXMuYm94W2oxXVtrMV0gPSB0aGlzLmJveFtqMl1bazJdO1xuICAgICAgW2oxLCBrMV0gPSBbajIsIGsyXTtcbiAgICB9XG4gICAgdGhpcy5zaXplLS07XG4gICAgcmV0dXJuIGl0ZW07XG4gIH1cblxuICBwdWJsaWMgdG9TdHJpbmcoKSB7XG4gICAgbGV0IG91dCA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpemU7IGkrKykge1xuICAgICAgbGV0IFtqLCBrXSA9IHRoaXMuaW5kZXhlc09mKGkpO1xuICAgICAgb3V0LnB1c2godGhpcy5ib3hbal1ba10pXG4gICAgfVxuICAgIHJldHVybiBvdXQuam9pbihcIixcIik7XG4gIH1cbn1cbiJdfQ==